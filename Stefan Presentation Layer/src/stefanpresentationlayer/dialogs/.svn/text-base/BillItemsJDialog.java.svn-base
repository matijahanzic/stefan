/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BillItemsJDialog.java
 *
 * Created on Feb 8, 2012, 7:21:55 PM
 */
package stefanpresentationlayer.dialogs;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.jdesktop.observablecollections.ObservableCollections;
import stefan.business.objects.BillItem;
import stefan.business.OrderManager;
import stefanpresentationlayer.MyTableCellRenderer;

/**
 *
 * @author Matija
 */
public class BillItemsJDialog extends javax.swing.JDialog {

    private List<BillItem> items = ObservableCollections.observableList(new ArrayList<BillItem>());
    private List<BillItem> alreadySelectedItems;
    private BillItem selectedBillItem = null;
    private int parts;
    private MyTableCellRenderer rendrer;

    /** Creates new form BillItemsJDialog */
    public BillItemsJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Odabir Stavki Raƒçuna");
        jCheckBox1.setSelected(true);
        OrderManager manager = new OrderManager();
        items = manager.getUndeliveredBillItems();


        this.firePropertyChange("items", null, null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane2 = new javax.swing.JScrollPane();
        ItemsTable = new javax.swing.JTable();
        selectBtn = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(stefanpresentationlayer.StefanPresentationLayerApp.class).getContext().getResourceMap(BillItemsJDialog.class);
        ItemsTable.setFont(resourceMap.getFont("ItemsTable.font")); // NOI18N
        ItemsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ItemsTable.setName("ItemsTable"); // NOI18N
        ItemsTable.setRowHeight(24);
        ItemsTable.setRowMargin(4);
        ItemsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${items}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, ItemsTable, "");
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${orderNumber}"));
        columnBinding.setColumnName("Order Number");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${position}"));
        columnBinding.setColumnName("Position");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${designNumber}"));
        columnBinding.setColumnName("Design Number");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${designIdentity}"));
        columnBinding.setColumnName("Design Identity");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${designClass}"));
        columnBinding.setColumnName("Design Class");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${designName}"));
        columnBinding.setColumnName("Design Name");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantityOrdered}"));
        columnBinding.setColumnName("Quantity Ordered");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantityDelivered}"));
        columnBinding.setColumnName("Quantity Delivered");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        ItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemsTableMouseClicked(evt);
            }
        });
        ItemsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ItemsTableKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(ItemsTable);
        ItemsTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("ItemsTable.columnModel.title0")); // NOI18N
        ItemsTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("ItemsTable.columnModel.title1")); // NOI18N
        ItemsTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("ItemsTable.columnModel.title2")); // NOI18N
        ItemsTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("ItemsTable.columnModel.title3")); // NOI18N
        ItemsTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("ItemsTable.columnModel.title4")); // NOI18N
        ItemsTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("ItemsTable.columnModel.title5")); // NOI18N
        ItemsTable.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("ItemsTable.columnModel.title7")); // NOI18N
        ItemsTable.getColumnModel().getColumn(7).setHeaderValue(resourceMap.getString("ItemsTable.columnModel.title6")); // NOI18N

        selectBtn.setText(resourceMap.getString("selectBtn.text")); // NOI18N
        selectBtn.setName("selectBtn"); // NOI18N
        selectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBtnActionPerformed(evt);
            }
        });

        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 542, Short.MAX_VALUE)
                        .addComponent(selectBtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(selectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBtnActionPerformed
        int rowIndex = ItemsTable.getSelectedRow();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(null, "Odaberite stavku.");
        } else {
            selectedBillItem = items.get(rowIndex);
            boolean isAnswerOk = false;

            while (!isAnswerOk) {
                String partsString = JOptionPane.showInputDialog(null, "Koliko komada?", selectedBillItem.getQuantityOrdered() - selectedBillItem.getQuantityDelivered());
                if (partsString == null) {
                    selectedBillItem = null;
                    break;
                } else {
                    try {
                        parts = Integer.valueOf(partsString);
                        if (getParts() <= 0) {
                            JOptionPane.showMessageDialog(null, "Unesite vi≈°e od 0 komada");
                        } else {

                            String karton = JOptionPane.showInputDialog(null, "Karton broj?");
                            if (karton == null) {
                                selectedBillItem = null;
                                break;
                            } else {
                                if (!ValidFormat(karton.trim().toLowerCase())) {
                                    throw new Exception("Dopu≈°teni samo brojevi i '+' znak");
                                }

                                isAnswerOk = true;
                                selectedBillItem.setParts(parts);
                                selectedBillItem.setPackageNumber(karton);
                                this.dispose();
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }
                }
            }

        }
    }//GEN-LAST:event_selectBtnActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed

        if (jCheckBox1.isSelected()) {
            OrderManager manager = new OrderManager();
            items = manager.getUndeliveredBillItems();
            this.firePropertyChange("items", null, null);
        } else {
            OrderManager manager = new OrderManager();
            items = manager.getAllBillItems();
            this.firePropertyChange("items", null, null);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void ItemsTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ItemsTableKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            evt.consume();
            selectBtnActionPerformed(null);
        }
    }//GEN-LAST:event_ItemsTableKeyPressed

    private void ItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemsTableMouseClicked
        if (evt.getClickCount() == 2) {
            selectBtnActionPerformed(null);
        }
    }//GEN-LAST:event_ItemsTableMouseClicked

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        OrderManager manager = new OrderManager();
        if (jCheckBox1.isSelected()) {
            items = manager.getUndeliveredBillItemsByDesignNumber(jTextField1.getText());
        } else {
            items = manager.getAllBillItemsByDesignNumber(jTextField1.getText());
        }
        rendrer.setBillItems(items);
        this.firePropertyChange("items", null, null);
    }//GEN-LAST:event_jTextField1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;




                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillItemsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillItemsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillItemsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillItemsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                BillItemsJDialog dialog = new BillItemsJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ItemsTable;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton selectBtn;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the items
     */
    public List<BillItem> getItems() {
        return items;
    }

    /**
     * @param items the items to set
     */
    public void setItems(List<BillItem> items) {
        this.items = items;
    }

    /**
     * @return the selectedBillItem
     */
    public BillItem getSelectedBillItem() {
        return selectedBillItem;
    }

    /**
     * @return the parts
     */
    public int getParts() {
        return parts;
    }

    /**
     * @return the alreadySelectedItems
     */
    public List<BillItem> getAlreadySelectedItems() {
        return alreadySelectedItems;
    }

    /**
     * @param alreadySelectedItems the alreadySelectedItems to set
     */
    public void setAlreadySelectedItems(List<BillItem> alreadySelectedItems) {
        this.alreadySelectedItems = alreadySelectedItems;

        List<Integer> alreadySelectedIDs = new ArrayList<Integer>();
        for (BillItem billItem : alreadySelectedItems) {
            alreadySelectedIDs.add(billItem.getOrderItemId());
        }

        rendrer = new MyTableCellRenderer();
        rendrer.setSelectedItems(alreadySelectedIDs);
        rendrer.setBillItems(items);

        for (int i = 0; i < ItemsTable.getModel().getColumnCount(); i++) {
            ItemsTable.getColumnModel().getColumn(i).setCellRenderer(rendrer);
        }
    }

    private boolean ValidFormat(String karton) {
        char[] ar = karton.toCharArray();
        if(karton.indexOf("+") == 0){
            return false;
        }
        if(karton.length()==0){
            return false;
        }
        for(int i=0; i<karton.length();i++){
            if(!(Character.isDigit(ar[i])) && (ar[i] != '+') && (ar[i] != 'p')){
                return false;
            }
        }
        return true;
    }
}
